name: Nordic Numbers Blog Automation

on:
  schedule:
    # Run daily at midnight UTC (same as your current cron)
    - cron: '0 0 * * *'
  
  # Allow manual triggering from GitHub UI
  workflow_dispatch:

jobs:
  blog-automation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for git operations
    
    # No need to install anything - we're just using SSH to connect to your Mac
    
    - name: Set up SSH connection to your Mac
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_PORT: ${{ secrets.SSH_PORT }}
      run: |
        # Set up SSH directory and key
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Write SSH key (ensure proper formatting)
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Verify key format
        ssh-keygen -l -f ~/.ssh/id_rsa
        
        # Add your Mac to known hosts (disable strict checking for first connection)
        ssh-keyscan -p $SSH_PORT $SSH_HOST >> ~/.ssh/known_hosts 2>/dev/null || true
        
        # Test connection with verbose output
        ssh -v -o StrictHostKeyChecking=no -p $SSH_PORT -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "echo 'SSH connection successful'"
    
    - name: Run blog automation scripts
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_PORT: ${{ secrets.SSH_PORT }}
      run: |
        # Execute the master automation script on your Mac via SSH
        ssh -o StrictHostKeyChecking=no -p $SSH_PORT -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "
          export TZ=UTC
          cd ~/blog/daehl-e
          
          # Make sure scripts are executable
          chmod +x *.sh
          
          # Run the master automation script
          ./master_automation.sh
        "
    
    - name: Sync blog updates back to GitHub
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
        SSH_PORT: ${{ secrets.SSH_PORT }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Pull any changes made on your Mac back to GitHub
        ssh -o StrictHostKeyChecking=no -p $SSH_PORT -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "
          cd ~/blog/daehl-e
          
          # Configure git if not already done
          git config --global user.email 'github-actions@users.noreply.github.com'
          git config --global user.name 'GitHub Actions Bot'
          
          # Check current remote URL and switch to SSH if needed
          current_remote=\$(git remote get-url origin)
          if [[ \$current_remote == https://github.com/* ]]; then
            echo 'Switching from HTTPS to SSH remote...'
            repo_path=\${current_remote#https://github.com/}
            git remote set-url origin git@github.com:\$repo_path
          fi
          
          # Add and commit any new files/changes
          git add .
          git diff --staged --quiet || git commit -m 'Automated blog update - \$(date -u)'
          
          # Push changes back to GitHub using SSH
          git push origin main
        "
    
    - name: Upload logs as artifacts
      if: always()  # Run even if previous steps failed
      uses: actions/upload-artifact@v4
      with:
        name: automation-logs
        path: |
          logs/
        retention-days: 30