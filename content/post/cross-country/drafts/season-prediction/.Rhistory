arrange(ID, Season) %>%
group_by(ID) %>%
mutate(
Prev_Pelo = lag(Pelo),
Prev_Sprint = lag(Sprint_Pelo),
Prev_Sprint_C = lag(Sprint_C_Pelo),
Prev_Sprint_F = lag(Sprint_F_Pelo),
Prev_Distance = lag(Distance_Pelo),
Prev_Distance_F = lag(Distance_F_Pelo),
Prev_Distance_C = lag(Distance_C_Pelo),
Prev_F = lag(Freestyle_Pelo),
Prev_C = lag(Classic_Pelo),
Prev_Pct_of_Max_Points = lag(Pct_of_Max_Points)
) %>%
ungroup() %>%
filter(Season > 1981)
# Handle missing values in previous season data
df82_final <- elo_df82 %>%
group_by(Season) %>%
mutate(
Prev_Distance = replace_na_with_quartile(Prev_Distance),
Prev_Distance_C = replace_na_with_quartile(Prev_Distance_C),
Prev_Distance_F = replace_na_with_quartile(Prev_Distance_F),
Prev_Pelo = replace_na_with_quartile(Prev_Pelo),
Prev_Sprint = replace_na_with_quartile(Prev_Sprint),
Prev_Sprint_C = replace_na_with_quartile(Prev_Sprint_C),
Prev_Sprint_F = replace_na_with_quartile(Prev_Sprint_F),
Prev_F = replace_na_with_quartile(Prev_F),
Prev_C = replace_na_with_quartile(Prev_C),
Prev_Pct_of_Max_Points = replace(Prev_Pct_of_Max_Points, is.na(Prev_Pct_of_Max_Points), 0)
) %>%
ungroup()
# Process ladies data with same methodology
df82_ladies <- L_chrono %>%
mutate(Points = case_when(
Event == "Tour de Ski" & Distance == "Stage" ~ map_int(Place, ~ get_points(.x, tds_points)),
Event == "Tour de Ski" ~ map_int(Place, ~ get_points(.x, stage_points)),
TRUE ~ map_int(Place, ~ get_points(.x, wc_points))
)) %>%
arrange(Date, Race, Place) %>%
filter(Event %in% c("Offseason", "World Cup", "Nordic Opening", "Tour de Ski", "World Cup Final", "Ski Tour Canada")) %>%
group_by(ID, Season) %>%
mutate(Cumulative_Points = cumsum(Points)) %>%
ungroup() %>%
group_by(Season, Race) %>%
mutate(
Distance_Pelo = replace_na_with_quartile(Distance_Pelo),
Distance_C_Pelo = replace_na_with_quartile(Distance_C_Pelo),
Distance_F_Pelo = replace_na_with_quartile(Distance_F_Pelo),
Pelo = replace_na_with_quartile(Pelo),
Sprint_Pelo = replace_na_with_quartile(Sprint_Pelo),
Sprint_C_Pelo = replace_na_with_quartile(Sprint_C_Pelo),
Sprint_F_Pelo = replace_na_with_quartile(Sprint_F_Pelo),
Freestyle_Pelo = replace_na_with_quartile(Freestyle_Pelo),
Classic_Pelo = replace_na_with_quartile(Classic_Pelo)
) %>%
ungroup() %>%
filter(!Distance %in% c("Ts", "Rel"))
# Calculate maximum points per season for ladies
first_place_ladies <- df82_ladies %>%
filter(Place == 1)
max_points_per_season_ladies <- first_place_ladies %>%
group_by(Season) %>%
summarise(Max_Points = sum(Points), .groups = 'drop')
df82_ladies <- df82_ladies %>%
left_join(max_points_per_season_ladies, by = "Season") %>%
mutate(Pct_of_Max_Points = Cumulative_Points / Max_Points)
# Create ladies ELO dataframe with previous season values
elo_df82_ladies <- df82_ladies %>%
filter(Event == "Offseason") %>%
arrange(ID, Season) %>%
group_by(ID) %>%
mutate(
Prev_Pelo = lag(Pelo),
Prev_Sprint = lag(Sprint_Pelo),
Prev_Sprint_C = lag(Sprint_C_Pelo),
Prev_Sprint_F = lag(Sprint_F_Pelo),
Prev_Distance = lag(Distance_Pelo),
Prev_Distance_F = lag(Distance_F_Pelo),
Prev_Distance_C = lag(Distance_C_Pelo),
Prev_F = lag(Freestyle_Pelo),
Prev_C = lag(Classic_Pelo),
Prev_Pct_of_Max_Points = lag(Pct_of_Max_Points)
) %>%
ungroup() %>%
filter(Season > 1981)
# Handle missing values in previous season data for ladies
df82_final_ladies <- elo_df82_ladies %>%
group_by(Season) %>%
mutate(
Prev_Distance = replace_na_with_quartile(Prev_Distance),
Prev_Distance_C = replace_na_with_quartile(Prev_Distance_C),
Prev_Distance_F = replace_na_with_quartile(Prev_Distance_F),
Prev_Pelo = replace_na_with_quartile(Prev_Pelo),
Prev_Sprint = replace_na_with_quartile(Prev_Sprint),
Prev_Sprint_C = replace_na_with_quartile(Prev_Sprint_C),
Prev_Sprint_F = replace_na_with_quartile(Prev_Sprint_F),
Prev_F = replace_na_with_quartile(Prev_F),
Prev_C = replace_na_with_quartile(Prev_C),
Prev_Pct_of_Max_Points = replace(Prev_Pct_of_Max_Points, is.na(Prev_Pct_of_Max_Points), 0)
) %>%
ungroup()
print(paste("Men's comprehensive dataset created with", nrow(df82_final), "observations"))
print(paste("Men's seasons covered:", min(df82_final$Season), "to", max(df82_final$Season)))
print(paste("Unique men's skiers:", length(unique(df82_final$ID))))
print(paste("Ladies comprehensive dataset created with", nrow(df82_final_ladies), "observations"))
print(paste("Ladies seasons covered:", min(df82_final_ladies$Season), "to", max(df82_final_ladies$Season)))
print(paste("Unique ladies skiers:", length(unique(df82_final_ladies$ID))))
# Comprehensive age progression analysis using df82-style data
# Calculate BOTH additive and multiplicative age adjustments for ALL ELO types
analyze_elo_progression_by_age <- function(df, min_exp = 20) {
# All ELO rating types to analyze
elo_types <- list(
"Pelo" = c("Pelo", "Prev_Pelo"),
"Distance_Pelo" = c("Distance_Pelo", "Prev_Distance"),
"Distance_C_Pelo" = c("Distance_C_Pelo", "Prev_Distance_C"),
"Distance_F_Pelo" = c("Distance_F_Pelo", "Prev_Distance_F"),
"Sprint_Pelo" = c("Sprint_Pelo", "Prev_Sprint"),
"Sprint_C_Pelo" = c("Sprint_C_Pelo", "Prev_Sprint_C"),
"Sprint_F_Pelo" = c("Sprint_F_Pelo", "Prev_Sprint_F"),
"Classic_Pelo" = c("Classic_Pelo", "Prev_C"),
"Freestyle_Pelo" = c("Freestyle_Pelo", "Prev_F")
)
# Calculate year-over-year changes for all ELO types
df_changes <- df %>%
mutate(Age = as.integer(floor(Age))) %>%
filter(!is.na(Prev_Pelo), !is.na(Pelo)) %>%  # Ensure we have both current and previous values
filter(Exp >= min_exp) %>%  # Filter for experienced skiers
rowwise() %>%
mutate(
# Calculate absolute changes (ADDITIVE adjustments)
pelo_change = Pelo - Prev_Pelo,
distance_change = Distance_Pelo - Prev_Distance,
distance_c_change = Distance_C_Pelo - Prev_Distance_C,
distance_f_change = Distance_F_Pelo - Prev_Distance_F,
sprint_change = Sprint_Pelo - Prev_Sprint,
sprint_c_change = Sprint_C_Pelo - Prev_Sprint_C,
sprint_f_change = Sprint_F_Pelo - Prev_Sprint_F,
classic_change = Classic_Pelo - Prev_C,
freestyle_change = Freestyle_Pelo - Prev_F,
# Calculate multiplicative factors (MULTIPLICATIVE adjustments)
pelo_factor = ifelse(Prev_Pelo > 0, Pelo / Prev_Pelo, 1),
distance_factor = ifelse(Prev_Distance > 0, Distance_Pelo / Prev_Distance, 1),
distance_c_factor = ifelse(Prev_Distance_C > 0, Distance_C_Pelo / Prev_Distance_C, 1),
distance_f_factor = ifelse(Prev_Distance_F > 0, Distance_F_Pelo / Prev_Distance_F, 1),
sprint_factor = ifelse(Prev_Sprint > 0, Sprint_Pelo / Prev_Sprint, 1),
sprint_c_factor = ifelse(Prev_Sprint_C > 0, Sprint_C_Pelo / Prev_Sprint_C, 1),
sprint_f_factor = ifelse(Prev_Sprint_F > 0, Sprint_F_Pelo / Prev_Sprint_F, 1),
classic_factor = ifelse(Prev_C > 0, Classic_Pelo / Prev_C, 1),
freestyle_factor = ifelse(Prev_F > 0, Freestyle_Pelo / Prev_F, 1)
) %>%
ungroup()
# Calculate age group statistics for ADDITIVE adjustments
age_stats_additive <- df_changes %>%
filter(Age >= 15, Age <= 40) %>%
group_by(Age) %>%
summarise(
n = n(),
# ADDITIVE age adjustments (points to add/subtract by age)
pelo_add = mean(pelo_change, na.rm = TRUE),
distance_add = mean(distance_change, na.rm = TRUE),
distance_c_add = mean(distance_c_change, na.rm = TRUE),
distance_f_add = mean(distance_f_change, na.rm = TRUE),
sprint_add = mean(sprint_change, na.rm = TRUE),
sprint_c_add = mean(sprint_c_change, na.rm = TRUE),
sprint_f_add = mean(sprint_f_change, na.rm = TRUE),
classic_add = mean(classic_change, na.rm = TRUE),
freestyle_add = mean(freestyle_change, na.rm = TRUE),
# Standard errors for additive adjustments
pelo_add_se = sd(pelo_change, na.rm = TRUE) / sqrt(n()),
distance_add_se = sd(distance_change, na.rm = TRUE) / sqrt(n()),
distance_c_add_se = sd(distance_c_change, na.rm = TRUE) / sqrt(n()),
distance_f_add_se = sd(distance_f_change, na.rm = TRUE) / sqrt(n()),
sprint_add_se = sd(sprint_change, na.rm = TRUE) / sqrt(n()),
sprint_c_add_se = sd(sprint_c_change, na.rm = TRUE) / sqrt(n()),
sprint_f_add_se = sd(sprint_f_change, na.rm = TRUE) / sqrt(n()),
classic_add_se = sd(classic_change, na.rm = TRUE) / sqrt(n()),
freestyle_add_se = sd(freestyle_change, na.rm = TRUE) / sqrt(n()),
.groups = 'drop'
) %>%
filter(n >= 3)
# Calculate age group statistics for MULTIPLICATIVE adjustments
age_stats_multiplicative <- df_changes %>%
filter(Age >= 15, Age <= 40) %>%
group_by(Age) %>%
summarise(
n = n(),
# MULTIPLICATIVE age adjustments (factors to multiply by age)
pelo_mult = mean(pelo_factor, na.rm = TRUE),
distance_mult = mean(distance_factor, na.rm = TRUE),
distance_c_mult = mean(distance_c_factor, na.rm = TRUE),
distance_f_mult = mean(distance_f_factor, na.rm = TRUE),
sprint_mult = mean(sprint_factor, na.rm = TRUE),
sprint_c_mult = mean(sprint_c_factor, na.rm = TRUE),
sprint_f_mult = mean(sprint_f_factor, na.rm = TRUE),
classic_mult = mean(classic_factor, na.rm = TRUE),
freestyle_mult = mean(freestyle_factor, na.rm = TRUE),
# Standard errors for multiplicative adjustments
pelo_mult_se = sd(pelo_factor, na.rm = TRUE) / sqrt(n()),
distance_mult_se = sd(distance_factor, na.rm = TRUE) / sqrt(n()),
distance_c_mult_se = sd(distance_c_factor, na.rm = TRUE) / sqrt(n()),
distance_f_mult_se = sd(distance_f_factor, na.rm = TRUE) / sqrt(n()),
sprint_mult_se = sd(sprint_factor, na.rm = TRUE) / sqrt(n()),
sprint_c_mult_se = sd(sprint_c_factor, na.rm = TRUE) / sqrt(n()),
sprint_f_mult_se = sd(sprint_f_factor, na.rm = TRUE) / sqrt(n()),
classic_mult_se = sd(classic_factor, na.rm = TRUE) / sqrt(n()),
freestyle_mult_se = sd(freestyle_factor, na.rm = TRUE) / sqrt(n()),
.groups = 'drop'
) %>%
filter(n >= 3)
return(list(
changes = df_changes,
additive_stats = age_stats_additive,
multiplicative_stats = age_stats_multiplicative
))
}
# Run age progression analysis on comprehensive datasets
print("=== MEN'S AGE PROGRESSION ANALYSIS (COMPREHENSIVE) ===")
age_analysis_men <- analyze_elo_progression_by_age(df82_final)
print("Men's age-based ADDITIVE ELO adjustments (points to add/subtract):")
print(age_analysis_men$additive_stats %>%
dplyr::select(Age, n, pelo_add, distance_add, distance_c_add, distance_f_add,
sprint_add, classic_add, freestyle_add) %>%
mutate(across(ends_with("_add"), ~ round(.x, 1))))
print("Men's age-based MULTIPLICATIVE ELO adjustments (factors to multiply by):")
print(age_analysis_men$multiplicative_stats %>%
dplyr::select(Age, n, pelo_mult, distance_mult, distance_c_mult, distance_f_mult,
sprint_mult, classic_mult, freestyle_mult) %>%
mutate(across(ends_with("_mult"), ~ round(.x, 3))))
print(paste("Total observations in men's age analysis:", nrow(age_analysis_men$changes)))
print(paste("Men's age groups with sufficient data:", nrow(age_analysis_men$additive_stats)))
print("=== LADIES AGE PROGRESSION ANALYSIS (COMPREHENSIVE) ===")
age_analysis_ladies <- analyze_elo_progression_by_age(df82_final_ladies)
print("Ladies age-based ADDITIVE ELO adjustments (points to add/subtract):")
print(age_analysis_ladies$additive_stats %>%
dplyr::select(Age, n, pelo_add, distance_add, distance_c_add, distance_f_add,
sprint_add, classic_add, freestyle_add) %>%
mutate(across(ends_with("_add"), ~ round(.x, 1))))
print("Ladies age-based MULTIPLICATIVE ELO adjustments (factors to multiply by):")
print(age_analysis_ladies$multiplicative_stats %>%
dplyr::select(Age, n, pelo_mult, distance_mult, distance_c_mult, distance_f_mult,
sprint_mult, classic_mult, freestyle_mult) %>%
mutate(across(ends_with("_mult"), ~ round(.x, 3))))
print(paste("Total observations in ladies age analysis:", nrow(age_analysis_ladies$changes)))
print(paste("Ladies age groups with sufficient data:", nrow(age_analysis_ladies$additive_stats)))
# Use men's analysis for backwards compatibility in subsequent sections
age_analysis <- age_analysis_men
# Calculate age-adjusted predictions for 2026 using 2025 ELO values
print("\n=== AGE-ADJUSTED 2026 PREDICTIONS ===")
# Extract age adjustment factors from analysis
age_adjustments <- age_analysis$age_stats %>%
dplyr::select(Age, avg_distance_change, avg_sprint_change, avg_classic_change,
avg_freestyle_change, avg_pelo_change)
# Create prediction function
predict_2026_with_age_adjustment <- function(current_data, age_adj) {
predictions <- current_data %>%
mutate(Age = as.integer(floor(Age))) %>%  # Convert Age to integer to match age_adj
left_join(age_adj, by = "Age") %>%
mutate(
# Apply age-specific adjustments (default to 0 if no age data)
adj_distance = coalesce(avg_distance_change, 0),
adj_sprint = coalesce(avg_sprint_change, 0),
adj_classic = coalesce(avg_classic_change, 0),
adj_freestyle = coalesce(avg_freestyle_change, 0),
adj_pelo = coalesce(avg_pelo_change, 0),
# Calculate age-adjusted 2026 ELO values
Predicted_Distance_2026 = Distance_Pelo + adj_distance,
Predicted_Sprint_2026 = Sprint_Pelo + adj_sprint,
Predicted_Classic_2026 = Classic_Pelo + adj_classic,
Predicted_Freestyle_2026 = Freestyle_Pelo + adj_freestyle,
Predicted_Pelo_2026 = Pelo + adj_pelo,
# Age progression category
Age_Category = case_when(
Age <= 23 ~ "Young (≤23)",
Age <= 27 ~ "Prime (24-27)",
Age <= 31 ~ "Peak (28-31)",
Age <= 35 ~ "Mature (32-35)",
TRUE ~ "Veteran (36+)"
)
) %>%
dplyr::select(Skier, Nation, Age, Age_Category,
Distance_Pelo, Predicted_Distance_2026, adj_distance,
Sprint_Pelo, Predicted_Sprint_2026, adj_sprint,
Pelo, Predicted_Pelo_2026, adj_pelo,
Pct_of_Max_Points)
return(predictions)
}
# Apply age adjustments to 2025 data
if(exists("men_pred_data") && nrow(men_pred_data) > 0) {
age_adjusted_predictions <- predict_2026_with_age_adjustment(men_pred_data, age_adjustments)
print("Top 15 Age-Adjusted 2026 Predictions:")
print(age_adjusted_predictions %>%
arrange(desc(Predicted_Pelo_2026)) %>%
dplyr::select(Skier, Nation, Age, Age_Category, Pelo, Predicted_Pelo_2026, adj_pelo) %>%
mutate(
Pelo = round(Pelo, 0),
Predicted_Pelo_2026 = round(Predicted_Pelo_2026, 0),
adj_pelo = round(adj_pelo, 1)
) %>%
head(15))
# Identify biggest improvers and decliners
print("\nBiggest Expected Improvers (Age-Adjusted):")
print(age_adjusted_predictions %>%
arrange(desc(adj_pelo)) %>%
dplyr::select(Skier, Nation, Age, Age_Category, adj_pelo) %>%
filter(adj_pelo > 0) %>%
head(10))
print("\nBiggest Expected Decliners (Age-Adjusted):")
print(age_adjusted_predictions %>%
arrange(adj_pelo) %>%
dplyr::select(Skier, Nation, Age, Age_Category, adj_pelo) %>%
filter(adj_pelo < 0) %>%
head(10))
} else {
print("No 2025 prediction data available for age adjustment")
}
# Enhanced age adjustment using percentage of maximum approach with df82 data
print("\n=== ENHANCED AGE ADJUSTMENT (PERCENTAGE METHOD - DF82) ===")
# Calculate percentage-based age effects using comprehensive df82 dataset
calculate_percentage_changes_df82 <- function(df) {
# Calculate maximum ELO per season for normalization
seasonal_max <- df %>%
group_by(Season) %>%
summarise(
max_distance = max(Distance_Pelo, na.rm = TRUE),
max_sprint = max(Sprint_Pelo, na.rm = TRUE),
max_classic = max(Classic_Pelo, na.rm = TRUE),
max_freestyle = max(Freestyle_Pelo, na.rm = TRUE),
max_pelo = max(Pelo, na.rm = TRUE),
.groups = 'drop'
)
# Join with main data and calculate percentages
df_with_pct <- df %>%
mutate(Age = as.integer(floor(Age))) %>%  # Convert Age to integer
left_join(seasonal_max, by = "Season") %>%
mutate(
# Current season percentages
distance_pct_of_max = Distance_Pelo / max_distance * 100,
sprint_pct_of_max = Sprint_Pelo / max_sprint * 100,
classic_pct_of_max = Classic_Pelo / max_classic * 100,
freestyle_pct_of_max = Freestyle_Pelo / max_freestyle * 100,
pelo_pct_of_max = Pelo / max_pelo * 100,
# Previous season percentages (already calculated from df82 previous values)
prev_distance_pct = Prev_Distance / max_distance * 100,
prev_sprint_pct = Prev_Sprint / max_sprint * 100,
prev_classic_pct = Prev_C / max_classic * 100,
prev_freestyle_pct = Prev_F / max_freestyle * 100,
prev_pelo_pct = Prev_Pelo / max_pelo * 100,
# Calculate percentage changes
distance_pct_change = distance_pct_of_max - prev_distance_pct,
sprint_pct_change = sprint_pct_of_max - prev_sprint_pct,
classic_pct_change = classic_pct_of_max - prev_classic_pct,
freestyle_pct_change = freestyle_pct_of_max - prev_freestyle_pct,
pelo_pct_change = pelo_pct_of_max - prev_pelo_pct
) %>%
filter(!is.na(prev_distance_pct), !is.na(distance_pct_of_max), Exp >= 20)
return(df_with_pct)
}
# Calculate percentage-based age effects using df82 data
pct_changes <- calculate_percentage_changes_df82(df82_final)
# Age-based percentage change statistics
age_pct_stats <- pct_changes %>%
filter(Age >= 15, Age <= 40) %>%
group_by(Age) %>%
summarise(
n = n(),
avg_distance_pct_change = mean(distance_pct_change, na.rm = TRUE),
avg_sprint_pct_change = mean(sprint_pct_change, na.rm = TRUE),
avg_classic_pct_change = mean(classic_pct_change, na.rm = TRUE),
avg_freestyle_pct_change = mean(freestyle_pct_change, na.rm = TRUE),
avg_pelo_pct_change = mean(pelo_pct_change, na.rm = TRUE),
.groups = 'drop'
) %>%
filter(n >= 10)
print("Age-based percentage change statistics:")
print(age_pct_stats %>%
dplyr::select(Age, n, avg_distance_pct_change, avg_sprint_pct_change, avg_pelo_pct_change) %>%
mutate(across(starts_with("avg_"), ~ round(.x, 2))))
# Apply percentage-based age adjustments
if(exists("men_pred_data") && nrow(men_pred_data) > 0) {
# Get 2025 maximums for percentage calculation
max_2025 <- men_pred_data %>%
summarise(
max_distance_2025 = max(Distance_Pelo, na.rm = TRUE),
max_sprint_2025 = max(Sprint_Pelo, na.rm = TRUE),
max_classic_2025 = max(Classic_Pelo, na.rm = TRUE),
max_freestyle_2025 = max(Freestyle_Pelo, na.rm = TRUE),
max_pelo_2025 = max(Pelo, na.rm = TRUE)
)
pct_adjusted_predictions <- men_pred_data %>%
mutate(
Age = as.integer(floor(Age)),  # Convert Age to integer to match age_pct_stats
# Calculate current percentages of 2025 max
current_distance_pct = Distance_Pelo / max_2025$max_distance_2025 * 100,
current_sprint_pct = Sprint_Pelo / max_2025$max_sprint_2025 * 100,
current_classic_pct = Classic_Pelo / max_2025$max_classic_2025 * 100,
current_freestyle_pct = Freestyle_Pelo / max_2025$max_freestyle_2025 * 100,
current_pelo_pct = Pelo / max_2025$max_pelo_2025 * 100
) %>%
left_join(age_pct_stats %>% dplyr::select(Age, avg_distance_pct_change, avg_sprint_pct_change,
avg_classic_pct_change, avg_freestyle_pct_change,
avg_pelo_pct_change), by = "Age") %>%
mutate(
# Apply percentage changes (default to 0 if no age data)
adj_distance_pct = coalesce(avg_distance_pct_change, 0),
adj_sprint_pct = coalesce(avg_sprint_pct_change, 0),
adj_classic_pct = coalesce(avg_classic_pct_change, 0),
adj_freestyle_pct = coalesce(avg_freestyle_pct_change, 0),
adj_pelo_pct = coalesce(avg_pelo_pct_change, 0),
# Calculate new percentages (capped at 100%)
new_distance_pct = pmin(100, current_distance_pct + adj_distance_pct),
new_sprint_pct = pmin(100, current_sprint_pct + adj_sprint_pct),
new_classic_pct = pmin(100, current_classic_pct + adj_classic_pct),
new_freestyle_pct = pmin(100, current_freestyle_pct + adj_freestyle_pct),
new_pelo_pct = pmin(100, current_pelo_pct + adj_pelo_pct),
# Convert back to ELO values (assume similar 2026 maximums)
Predicted_Distance_2026_Pct = new_distance_pct / 100 * max_2025$max_distance_2025,
Predicted_Sprint_2026_Pct = new_sprint_pct / 100 * max_2025$max_sprint_2025,
Predicted_Classic_2026_Pct = new_classic_pct / 100 * max_2025$max_classic_2025,
Predicted_Freestyle_2026_Pct = new_freestyle_pct / 100 * max_2025$max_freestyle_2025,
Predicted_Pelo_2026_Pct = new_pelo_pct / 100 * max_2025$max_pelo_2025
)
print("\nTop 15 Percentage-Adjusted 2026 Predictions:")
print(pct_adjusted_predictions %>%
arrange(desc(Predicted_Pelo_2026_Pct)) %>%
dplyr::select(Skier, Nation, Age, current_pelo_pct, new_pelo_pct, adj_pelo_pct) %>%
mutate(across(c(current_pelo_pct, new_pelo_pct, adj_pelo_pct), ~ round(.x, 1))) %>%
head(15))
}
# Age-adjusted percentage of max points predictions for 2026
print("\n=== AGE-ADJUSTED PERCENTAGE PREDICTIONS ===")
if(exists("age_analysis") && exists("men_pred_data") && nrow(men_pred_data) > 0) {
# Extract percentage point change adjustments from age analysis
age_pct_adjustments <- age_analysis$age_stats %>%
dplyr::select(Age, avg_pct_points_change)
# Apply age adjustments to current percentage of max points performance
age_adjusted_pct_predictions <- men_pred_data %>%
mutate(Age = as.integer(floor(Age))) %>%  # Convert Age to integer
left_join(age_pct_adjustments, by = "Age") %>%
mutate(
# Apply age-specific percentage point adjustments (default to 0 if no age data)
adj_pct_points = coalesce(avg_pct_points_change, 0),
# Calculate age-adjusted 2026 percentage of max points
# Current percentage + age adjustment (capped at 100%)
Predicted_Pct_Max_2026 = pmin(1.0, pmax(0.0, Pct_of_Max_Points + adj_pct_points)),
# Age progression category for analysis
Age_Category = case_when(
Age <= 23 ~ "Young (≤23)",
Age <= 27 ~ "Prime (24-27)",
Age <= 31 ~ "Peak (28-31)",
Age <= 35 ~ "Mature (32-35)",
TRUE ~ "Veteran (36+)"
),
# Expected change classification
Expected_Change = case_when(
adj_pct_points > 0.02 ~ "Strong Improvement",
adj_pct_points > 0.01 ~ "Moderate Improvement",
adj_pct_points > -0.01 ~ "Stable",
adj_pct_points > -0.02 ~ "Moderate Decline",
TRUE ~ "Strong Decline"
)
)
print("Top 15 Age-Adjusted Percentage Predictions:")
print(age_adjusted_pct_predictions %>%
arrange(desc(Predicted_Pct_Max_2026)) %>%
dplyr::select(Skier, Nation, Age, Age_Category, Pct_of_Max_Points,
Predicted_Pct_Max_2026, adj_pct_points, Expected_Change) %>%
mutate(
Current_Pct = round(Pct_of_Max_Points * 100, 1),
Predicted_Pct = round(Predicted_Pct_Max_2026 * 100, 1),
Age_Adj = round(adj_pct_points * 100, 1)
) %>%
dplyr::select(Skier, Nation, Age, Age_Category, Current_Pct,
Predicted_Pct, Age_Adj, Expected_Change) %>%
head(15))
# Age category performance summary
print("\nAge-Adjusted Performance by Category:")
age_category_summary <- age_adjusted_pct_predictions %>%
group_by(Age_Category) %>%
summarise(
Count = n(),
Avg_Current_Pct = mean(Pct_of_Max_Points * 100, na.rm = TRUE),
Avg_Predicted_Pct = mean(Predicted_Pct_Max_2026 * 100, na.rm = TRUE),
Avg_Age_Effect = mean(adj_pct_points * 100, na.rm = TRUE),
Top_10_Count = sum(rank(desc(Predicted_Pct_Max_2026)) <= 10),
.groups = 'drop'
) %>%
arrange(desc(Avg_Predicted_Pct))
print(age_category_summary %>%
mutate(across(c(Avg_Current_Pct, Avg_Predicted_Pct, Avg_Age_Effect), ~ round(.x, 1))))
# Biggest age-related changes
print("\nBiggest Expected Improvements (Age Effect):")
print(age_adjusted_pct_predictions %>%
arrange(desc(adj_pct_points)) %>%
dplyr::select(Skier, Nation, Age, adj_pct_points, Expected_Change) %>%
filter(adj_pct_points > 0) %>%
mutate(Age_Effect_Pct = round(adj_pct_points * 100, 1)) %>%
dplyr::select(Skier, Nation, Age, Age_Effect_Pct, Expected_Change) %>%
head(10))
print("\nBiggest Expected Declines (Age Effect):")
print(age_adjusted_pct_predictions %>%
arrange(adj_pct_points) %>%
dplyr::select(Skier, Nation, Age, adj_pct_points, Expected_Change) %>%
filter(adj_pct_points < 0) %>%
mutate(Age_Effect_Pct = round(adj_pct_points * 100, 1)) %>%
dplyr::select(Skier, Nation, Age, Age_Effect_Pct, Expected_Change) %>%
head(10))
# Store results for merging
assign("age_adjusted_pct_predictions", age_adjusted_pct_predictions, envir = .GlobalEnv)
} else {
print("Age analysis or prediction data not available for percentage adjustments")
}
