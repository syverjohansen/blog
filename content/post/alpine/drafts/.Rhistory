for(threshold in position_thresholds) {
prob_col <- paste0("prob_top", threshold)
if(prob_col %in% names(position_preds)) {
sum_val <- sum(position_preds[[prob_col]], na.rm = TRUE)
log_info(sprintf("  %s: %.2f%% (should be %d%%)",
prob_col, sum_val, 100 * threshold))
}
}
# Store position predictions for this race
position_predictions[[i]] <- position_preds
# Check if probabilities are getting lost
log_info(paste("Race", i, "probability check:"))
# Group by nationality for summary (different for relay vs individuals)
if(is_relay) {
prob_summary <- startlist_prepared %>%
summarise(
mean_prob = mean(get(race_prob_col), na.rm = TRUE),
sum_prob = sum(get(race_prob_col), na.rm = TRUE),
n = n()
)
} else {
prob_summary <- startlist_prepared %>%
group_by(Nation) %>%
summarise(
mean_prob = mean(get(race_prob_col), na.rm = TRUE),
sum_prob = sum(get(race_prob_col), na.rm = TRUE),
n = n()
) %>%
arrange(desc(sum_prob))
}
# Prepare startlist points predictions
race_dfs[[i]] <- startlist_prepared %>%
mutate(
Base_Prediction = predict(model, newdata = .),
) %>%
left_join(skier_adjustments, by = participant_col) %>%
mutate(
# Regular adjustments
period_effect = replace_na(period_effect, 0),
elevation_effect = replace_na(elevation_effect, 0),
# Volatility metrics
prediction_volatility = replace_na(prediction_volatility, 0),
consistency_score = replace_na(consistency_score, 0),
upside_potential = replace_na(upside_potential, 0),
downside_risk = replace_na(downside_risk, 0),
volatility_ratio = replace_na(volatility_ratio, 1),
n_recent_races = replace_na(n_recent_races, 0),
# Using existing adjustment approach
period_adjustment = period_effect,
elevation_adjustment = elevation_effect,
# Base prediction and adjustments
Predicted_Points = Base_Prediction + period_adjustment + elevation_adjustment,
Predicted_Points = pmax(pmin(Predicted_Points, 100), 0),
# Apply race probability to predictions
Race_Prob = get(race_prob_col),
Final_Prediction = Predicted_Points * Race_Prob,
# Different scoring scenarios - adjusted by race probability
confidence_factor = pmin(n_recent_races / 10, 1),
scaled_upside_potential = upside_potential * (Predicted_Points/100),
scaled_downside_potential = downside_risk * (Predicted_Points/100),
# Safe prediction (downside)
Safe_Prediction = pmax(
(Predicted_Points - (prediction_volatility * 1.5 * confidence_factor)) * Race_Prob,
0
),
# Upside prediction
Upside_Prediction = pmin(
(Predicted_Points + (prediction_volatility * 1.5 * confidence_factor)) * Race_Prob,
100 * Race_Prob  # Cap at 100 * probability
)
) %>%
dplyr::select(all_of(participant_col),
if(!is_relay) "Nation" else NULL,
Base_Prediction, period_adjustment, elevation_adjustment,
prediction_volatility, volatility_ratio, confidence_factor,
Final_Prediction, Safe_Prediction, Upside_Prediction,
race_prob_col)
# Extra check to ensure race probability column exists and is properly named
if(!race_prob_col %in% names(race_dfs[[i]])) {
log_warn(paste("Race probability column", race_prob_col, "not in final race_dfs!"))
# Try to fix
if("Race_Prob" %in% names(race_dfs[[i]])) {
log_info("Renaming Race_Prob column to correct race probability column name")
race_dfs[[i]][[race_prob_col]] <- race_dfs[[i]][["Race_Prob"]]
}
}
}
# Get number of races from races dataframe
n_races <- nrow(races)
# Combine all race predictions (points)
final_predictions <- combine_predictions(race_dfs, startlist, is_relay = is_relay)
log_info(paste("Final predictions calculated for", if(is_relay) "relay" else gender))
# Create post predictions for blog (points)
post_predictions <- create_post_predictions(final_predictions, n_races, gender, is_relay = is_relay)
# Combine all position predictions into one dataframe
all_position_predictions <- bind_rows(position_predictions)
# Format position results
formatted_position_results <- format_position_results(all_position_predictions, next_weekend_date, if(is_relay) "relay" else gender, is_relay = is_relay)
# Create folder path based on next race weekend date
weekend_folder <- format(next_weekend_date, "%Y%m%d")
dir_path <- paste0("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks/", weekend_folder)
# Create directory if it doesn't exist
if (!dir.exists(dir_path)) {
dir.create(dir_path, recursive = TRUE)
}
# Save points predictions to Excel
if(is_relay) {
points_file_path <- file.path(dir_path, "relay-points.xlsx")
} else {
points_file_path <- file.path(dir_path, paste0(ifelse(gender == "men", "men", "women"), "-points.xlsx"))
}
write.xlsx(post_predictions, file = points_file_path)
log_info(paste("Saved", if(is_relay) "relay" else gender, "points predictions to", points_file_path))
# Return both points and position predictions
return(list(
full_predictions = final_predictions,
post_predictions = post_predictions,
position_predictions = all_position_predictions,
formatted_position_results = formatted_position_results
))
}
# Helper function to format position probability results
format_position_results <- function(position_results, next_weekend_date, gender, is_relay = FALSE) {
# Define participant column
participant_col <- if(is_relay) "Nation" else "Skier"
# Create a more reader-friendly version
formatted_results <- position_results %>%
rowwise() %>%
mutate(
# Get the appropriate race probability column for the current row's Race number
race_prob_col = paste0("Race", Race, "_Prob"),
Participation = if(race_prob_col %in% names(position_results)) position_results[[race_prob_col]][cur_group_id()] else NA_real_,
Win = prob_top1,
Podium = prob_top3,
Top5 = prob_top5,
Top10 = prob_top10,
Top30 = prob_top30
) %>%
ungroup()
# Select columns (different for relay vs individual)
if(is_relay) {
formatted_results <- formatted_results %>%
dplyr::select(Nation, Race, Participation, Win, Podium, Top5, Top10, Top30) %>%
arrange(Race, desc(Win))
} else {
formatted_results <- formatted_results %>%
dplyr::select(Skier, ID, Nation, Sex, Race, Participation, Win, Podium, Top5, Top10, Top30) %>%
arrange(Race, desc(Win))
}
weekend_folder <- format(next_weekend_date, "%Y%m%d")
dir_path <- paste0(
"~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks/",
weekend_folder
)
if (!dir.exists(dir_path)) {
dir.create(dir_path, recursive = TRUE)
}
# Split by race
races <- unique(formatted_results$Race)
race_dfs <- list()
for(race_num in races) {
race_df <- formatted_results %>%
filter(Race == race_num) %>%
dplyr::select(-Race)
sheet_name <- if(is_relay) {
paste0("Relay Race ", race_num)
} else {
paste0(
ifelse(gender == "men", "Men", "Women"),
" Race ", race_num
)
}
race_dfs[[sheet_name]] <- race_df
}
# Save to Excel
if(is_relay) {
output_file <- file.path(dir_path, "relay_position_probabilities.xlsx")
} else {
output_file <- file.path(
dir_path,
paste0(ifelse(gender == "men", "men", "women"), "_position_probabilities.xlsx")
)
}
write.xlsx(race_dfs, output_file)
log_info(paste("Formatted position probabilities saved to", output_file))
return(race_dfs)
}
# Function to create top contenders summary
create_top_contenders_summary <- function(men_results, women_results, relay_results = NULL) {
# Get position predictions
men_positions <- if(!is.null(men_results)) men_results$position_predictions else NULL
women_positions <- if(!is.null(women_results)) women_results$position_predictions else NULL
relay_positions <- if(!is.null(relay_results)) relay_results$position_predictions else NULL
weekend_folder <- format(next_weekend_date, "%Y%m%d")
dir_path <- paste0(
"~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks/",
weekend_folder
)
if (!dir.exists(dir_path)) {
dir.create(dir_path, recursive = TRUE)
}
top_contenders <- list()
# Process men's results if they exist
if(!is.null(men_positions) && nrow(men_positions) > 0) {
men_races <- unique(men_positions$Race)
for(race_num in men_races) {
race_df <- men_positions %>%
filter(Race == race_num)
# Top 5 for win probability
win_contenders <- race_df %>%
arrange(desc(prob_top1)) %>%
head(5) %>%
dplyr::select(Skier, Nation, prob_top1) %>%
rename(`Win%` = prob_top1)
sheet_name <- paste0("Men Race ", race_num, " - Win")
top_contenders[[sheet_name]] <- win_contenders
# Top 5 for podium probability
podium_contenders <- race_df %>%
arrange(desc(prob_top3)) %>%
head(5) %>%
dplyr::select(Skier, Nation, prob_top3) %>%
rename(`Podium%` = prob_top3)
sheet_name <- paste0("Men Race ", race_num, " - Podium")
top_contenders[[sheet_name]] <- podium_contenders
# Top 5 for Top-5 probability
top5_contenders <- race_df %>%
arrange(desc(prob_top5)) %>%
head(5) %>%
dplyr::select(Skier, Nation, prob_top5) %>%
rename(`Top5%` = prob_top5)
sheet_name <- paste0("Men Race ", race_num, " - Top5")
top_contenders[[sheet_name]] <- top5_contenders
}
}
# Process women's results if they exist
if(!is.null(women_positions) && nrow(women_positions) > 0) {
women_races <- unique(women_positions$Race)
for(race_num in women_races) {
race_df <- women_positions %>%
filter(Race == race_num)
# Top 5 for win probability
win_contenders <- race_df %>%
arrange(desc(prob_top1)) %>%
head(5) %>%
dplyr::select(Skier, Nation, prob_top1) %>%
rename(`Win%` = prob_top1)
sheet_name <- paste0("Women Race ", race_num, " - Win")
top_contenders[[sheet_name]] <- win_contenders
# Top 5 for podium probability
podium_contenders <- race_df %>%
arrange(desc(prob_top3)) %>%
head(5) %>%
dplyr::select(Skier, Nation, prob_top3) %>%
rename(`Podium%` = prob_top3)
sheet_name <- paste0("Women Race ", race_num, " - Podium")
top_contenders[[sheet_name]] <- podium_contenders
# Top 5 for Top-5 probability
top5_contenders <- race_df %>%
arrange(desc(prob_top5)) %>%
head(5) %>%
dplyr::select(Skier, Nation, prob_top5) %>%
rename(`Top5%` = prob_top5)
sheet_name <- paste0("Women Race ", race_num, " - Top5")
top_contenders[[sheet_name]] <- top5_contenders
}
}
# Process relay results if they exist
if(!is.null(relay_positions) && nrow(relay_positions) > 0) {
relay_races <- unique(relay_positions$Race)
for(race_num in relay_races) {
race_df <- relay_positions %>%
filter(Race == race_num)
# Top 5 for win probability
win_contenders <- race_df %>%
arrange(desc(prob_top1)) %>%
head(5) %>%
dplyr::select(Nation, prob_top1) %>%
rename(`Win%` = prob_top1)
sheet_name <- paste0("Relay Race ", race_num, " - Win")
top_contenders[[sheet_name]] <- win_contenders
# Top 5 for podium probability
podium_contenders <- race_df %>%
arrange(desc(prob_top3)) %>%
head(5) %>%
dplyr::select(Nation, prob_top3) %>%
rename(`Podium%` = prob_top3)
sheet_name <- paste0("Relay Race ", race_num, " - Podium")
top_contenders[[sheet_name]] <- podium_contenders
# Top 5 for Top-5 probability
top5_contenders <- race_df %>%
arrange(desc(prob_top5)) %>%
head(5) %>%
dplyr::select(Nation, prob_top5) %>%
rename(`Top5%` = prob_top5)
sheet_name <- paste0("Relay Race ", race_num, " - Top5")
top_contenders[[sheet_name]] <- top5_contenders
}
}
# Save to Excel if we have any top contenders
if(length(top_contenders) > 0) {
output_file <- file.path(dir_path, "top_contenders.xlsx")
write.xlsx(top_contenders, output_file)
log_info(paste("Top contenders summary saved to", output_file))
} else {
log_info("No top contenders to save")
}
return(top_contenders)
}
# Run the integrated predictions workflow
run_integrated_predictions_workflow <- function() {
log_info("Running integrated predictions workflow (points and position probabilities)")
# Run for men if races exist
if(nrow(men_races) > 0) {
log_info("Processing men's predictions")
men_results <- predict_races("men", is_relay = FALSE)
} else {
log_info("No men's races scheduled")
men_results <- NULL
}
# Run for women if races exist
if(nrow(women_races) > 0) {
log_info("Processing women's predictions")
women_results <- predict_races("women", is_relay = FALSE)
} else {
log_info("No women's races scheduled")
women_results <- NULL
}
# Run for relays if races exist
if(nrow(relays) > 0) {
log_info("Processing relay predictions")
relay_results <- predict_races(NULL, is_relay = TRUE)
} else {
log_info("No relay races scheduled")
relay_results <- NULL
}
# Create top contenders summary
top_contenders <- create_top_contenders_summary(men_results, women_results, relay_results)
# Display sample results
log_info("Prediction workflow complete")
# Return results
return(list(
men = men_results,
women = women_results,
relay = relay_results,
top_contenders = top_contenders
))
}
# First calculate race probabilities
log_info("Calculating race probabilities")
prob_results <- calculate_race_probabilities()
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
rlang::last_trace()
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/race-picks.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/race-picks.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
gc()
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/biathlon/drafts/weekly-picks2.R", echo=TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
rlang::last_trace()
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
rlang::last_trace()
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
source("~/blog/daehl-e/content/post/alpine/drafts/weekly-picks2.R", echo = TRUE)
